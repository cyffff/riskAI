{"ast":null,"code":"import axios from 'axios';\nimport { mockData } from './mockData';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api/v1';\n\n// Flag to determine if we should use mock data (for development/testing)\nconst USE_MOCK_DATA = process.env.REACT_APP_USE_MOCK_DATA === 'true' || true;\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Utility function to safely make API calls with fallback to mock data\nconst safeApiCall = async (apiCall, mockDataKey) => {\n  if (USE_MOCK_DATA) {\n    console.log(`Using mock data for ${mockDataKey}`);\n    return mockData[mockDataKey];\n  }\n  try {\n    const response = await apiCall();\n    return response.data;\n  } catch (error) {\n    console.error(`API error: ${error.message}. Using mock data instead.`);\n    return mockData[mockDataKey];\n  }\n};\n\n// Feature Management API\nexport const featureApi = {\n  // Features\n  getFeatures: async () => {\n    return safeApiCall(() => api.get('/features'), 'features');\n  },\n  createFeature: async feature => {\n    if (USE_MOCK_DATA) {\n      console.log('Mock create feature:', feature);\n      return {\n        ...feature,\n        id: Math.floor(Math.random() * 1000)\n      };\n    }\n    const response = await api.post('/features', feature);\n    return response.data;\n  },\n  updateFeature: async (id, feature) => {\n    if (USE_MOCK_DATA) {\n      console.log('Mock update feature:', id, feature);\n      return {\n        ...feature,\n        id\n      };\n    }\n    const response = await api.put(`/features/${id}`, feature);\n    return response.data;\n  },\n  deleteFeature: async id => {\n    if (USE_MOCK_DATA) {\n      console.log('Mock delete feature:', id);\n      return {\n        success: true\n      };\n    }\n    const response = await api.delete(`/features/${id}`);\n    return response.data;\n  },\n  // SQL Sets\n  getSqlSets: async () => {\n    return safeApiCall(() => api.get('/sql/sets'), 'sqlSets');\n  },\n  createSqlSet: async sqlSet => {\n    if (USE_MOCK_DATA) {\n      console.log('Mock create SQL set:', sqlSet);\n      return {\n        ...sqlSet,\n        id: Math.floor(Math.random() * 1000)\n      };\n    }\n    const response = await api.post('/sql/sets', sqlSet);\n    return response.data;\n  },\n  updateSqlSet: async (id, sqlSet) => {\n    if (USE_MOCK_DATA) {\n      console.log('Mock update SQL set:', id, sqlSet);\n      return {\n        ...sqlSet,\n        id\n      };\n    }\n    const response = await api.put(`/sql/sets/${id}`, sqlSet);\n    return response.data;\n  },\n  deleteSqlSet: async id => {\n    if (USE_MOCK_DATA) {\n      console.log('Mock delete SQL set:', id);\n      return {\n        success: true\n      };\n    }\n    const response = await api.delete(`/sql/sets/${id}`);\n    return response.data;\n  },\n  // SQL Statements\n  getSqlStatements: async () => {\n    return safeApiCall(() => api.get('/sql/statements'), 'sqlStatements');\n  },\n  createSqlStatement: async sqlStatement => {\n    if (USE_MOCK_DATA) {\n      console.log('Mock create SQL statement:', sqlStatement);\n      return {\n        ...sqlStatement,\n        id: Math.floor(Math.random() * 1000)\n      };\n    }\n    const response = await api.post('/sql/statements', sqlStatement);\n    return response.data;\n  },\n  updateSqlStatement: async (id, sqlStatement) => {\n    if (USE_MOCK_DATA) {\n      console.log('Mock update SQL statement:', id, sqlStatement);\n      return {\n        ...sqlStatement,\n        id\n      };\n    }\n    const response = await api.put(`/sql/statements/${id}`, sqlStatement);\n    return response.data;\n  },\n  deleteSqlStatement: async id => {\n    if (USE_MOCK_DATA) {\n      console.log('Mock delete SQL statement:', id);\n      return {\n        success: true\n      };\n    }\n    const response = await api.delete(`/sql/statements/${id}`);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","mockData","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","USE_MOCK_DATA","REACT_APP_USE_MOCK_DATA","api","create","baseURL","headers","safeApiCall","apiCall","mockDataKey","console","log","response","data","error","message","featureApi","getFeatures","get","createFeature","feature","id","Math","floor","random","post","updateFeature","put","deleteFeature","success","delete","getSqlSets","createSqlSet","sqlSet","updateSqlSet","deleteSqlSet","getSqlStatements","createSqlStatement","sqlStatement","updateSqlStatement","deleteSqlStatement"],"sources":["/Users/cyf/CursorProjects/riskAI/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport { mockData } from './mockData';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api/v1';\n\n// Flag to determine if we should use mock data (for development/testing)\nconst USE_MOCK_DATA = process.env.REACT_APP_USE_MOCK_DATA === 'true' || true;\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Utility function to safely make API calls with fallback to mock data\nconst safeApiCall = async (apiCall, mockDataKey) => {\n  if (USE_MOCK_DATA) {\n    console.log(`Using mock data for ${mockDataKey}`);\n    return mockData[mockDataKey];\n  }\n  \n  try {\n    const response = await apiCall();\n    return response.data;\n  } catch (error) {\n    console.error(`API error: ${error.message}. Using mock data instead.`);\n    return mockData[mockDataKey];\n  }\n};\n\n// Feature Management API\nexport const featureApi = {\n  // Features\n  getFeatures: async () => {\n    return safeApiCall(\n      () => api.get('/features'),\n      'features'\n    );\n  },\n\n  createFeature: async (feature) => {\n    if (USE_MOCK_DATA) {\n      console.log('Mock create feature:', feature);\n      return { ...feature, id: Math.floor(Math.random() * 1000) };\n    }\n    const response = await api.post('/features', feature);\n    return response.data;\n  },\n\n  updateFeature: async (id, feature) => {\n    if (USE_MOCK_DATA) {\n      console.log('Mock update feature:', id, feature);\n      return { ...feature, id };\n    }\n    const response = await api.put(`/features/${id}`, feature);\n    return response.data;\n  },\n\n  deleteFeature: async (id) => {\n    if (USE_MOCK_DATA) {\n      console.log('Mock delete feature:', id);\n      return { success: true };\n    }\n    const response = await api.delete(`/features/${id}`);\n    return response.data;\n  },\n\n  // SQL Sets\n  getSqlSets: async () => {\n    return safeApiCall(\n      () => api.get('/sql/sets'),\n      'sqlSets'\n    );\n  },\n\n  createSqlSet: async (sqlSet) => {\n    if (USE_MOCK_DATA) {\n      console.log('Mock create SQL set:', sqlSet);\n      return { ...sqlSet, id: Math.floor(Math.random() * 1000) };\n    }\n    const response = await api.post('/sql/sets', sqlSet);\n    return response.data;\n  },\n\n  updateSqlSet: async (id, sqlSet) => {\n    if (USE_MOCK_DATA) {\n      console.log('Mock update SQL set:', id, sqlSet);\n      return { ...sqlSet, id };\n    }\n    const response = await api.put(`/sql/sets/${id}`, sqlSet);\n    return response.data;\n  },\n\n  deleteSqlSet: async (id) => {\n    if (USE_MOCK_DATA) {\n      console.log('Mock delete SQL set:', id);\n      return { success: true };\n    }\n    const response = await api.delete(`/sql/sets/${id}`);\n    return response.data;\n  },\n\n  // SQL Statements\n  getSqlStatements: async () => {\n    return safeApiCall(\n      () => api.get('/sql/statements'),\n      'sqlStatements'\n    );\n  },\n\n  createSqlStatement: async (sqlStatement) => {\n    if (USE_MOCK_DATA) {\n      console.log('Mock create SQL statement:', sqlStatement);\n      return { ...sqlStatement, id: Math.floor(Math.random() * 1000) };\n    }\n    const response = await api.post('/sql/statements', sqlStatement);\n    return response.data;\n  },\n\n  updateSqlStatement: async (id, sqlStatement) => {\n    if (USE_MOCK_DATA) {\n      console.log('Mock update SQL statement:', id, sqlStatement);\n      return { ...sqlStatement, id };\n    }\n    const response = await api.put(`/sql/statements/${id}`, sqlStatement);\n    return response.data;\n  },\n\n  deleteSqlStatement: async (id) => {\n    if (USE_MOCK_DATA) {\n      console.log('Mock delete SQL statement:', id);\n      return { success: true };\n    }\n    const response = await api.delete(`/sql/statements/${id}`);\n    return response.data;\n  },\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}