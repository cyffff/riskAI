{"ast":null,"code":"var _jsxFileName = \"/Users/cyf/CursorProjects/riskAI/frontend/src/pages/feature-management/SQLSets.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Typography, Paper, CircularProgress, Alert } from '@mui/material';\nimport { SQLSetList } from '../../components/features/SQLSetList';\nimport { MockDataAlert } from '../../components/MockDataAlert';\nimport { featureApi } from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SQLSets() {\n  _s();\n  const [sqlSets, setSqlSets] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [usingMockData, setUsingMockData] = useState(false);\n  const fetchSqlSets = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // If there's an environment variable for using mock data, this will return true\n      const mockDataEnabled = process.env.REACT_APP_USE_MOCK_DATA === 'true' || true;\n      setUsingMockData(mockDataEnabled);\n      const data = await featureApi.getSqlSets();\n      setSqlSets(data);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch SQL sets');\n      console.error('Error fetching SQL sets:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchSqlSets();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      component: \"h1\",\n      gutterBottom: true,\n      children: \"SQL Sets Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), usingMockData && /*#__PURE__*/_jsxDEV(MockDataAlert, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 2,\n        mb: 2\n      },\n      children: loading ? /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"center\",\n        p: 3,\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(SQLSetList, {\n        sqlSets: sqlSets,\n        onUpdate: fetchSqlSets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(SQLSets, \"Nj6Xr94rTE4eYGYlXR9TOvrNfA8=\");\n_c = SQLSets;\nvar _c;\n$RefreshReg$(_c, \"SQLSets\");","map":{"version":3,"names":["React","useState","useEffect","Box","Typography","Paper","CircularProgress","Alert","SQLSetList","MockDataAlert","featureApi","jsxDEV","_jsxDEV","SQLSets","_s","sqlSets","setSqlSets","loading","setLoading","error","setError","usingMockData","setUsingMockData","fetchSqlSets","mockDataEnabled","process","env","REACT_APP_USE_MOCK_DATA","data","getSqlSets","err","message","console","children","variant","component","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","sx","p","mb","display","justifyContent","severity","onUpdate","_c","$RefreshReg$"],"sources":["/Users/cyf/CursorProjects/riskAI/frontend/src/pages/feature-management/SQLSets.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  CircularProgress,\n  Alert,\n} from '@mui/material';\nimport { SQLSetList } from '../../components/features/SQLSetList';\nimport { MockDataAlert } from '../../components/MockDataAlert';\nimport { featureApi } from '../../services/api';\n\nexport default function SQLSets() {\n  const [sqlSets, setSqlSets] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [usingMockData, setUsingMockData] = useState(false);\n\n  const fetchSqlSets = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // If there's an environment variable for using mock data, this will return true\n      const mockDataEnabled = process.env.REACT_APP_USE_MOCK_DATA === 'true' || true;\n      setUsingMockData(mockDataEnabled);\n      \n      const data = await featureApi.getSqlSets();\n      setSqlSets(data);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch SQL sets');\n      console.error('Error fetching SQL sets:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchSqlSets();\n  }, []);\n\n  return (\n    <Box>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        SQL Sets Management\n      </Typography>\n      \n      {usingMockData && <MockDataAlert />}\n      \n      <Paper sx={{ p: 2, mb: 2 }}>\n        {loading ? (\n          <Box display=\"flex\" justifyContent=\"center\" p={3}>\n            <CircularProgress />\n          </Box>\n        ) : error ? (\n          <Alert severity=\"error\">{error}</Alert>\n        ) : (\n          <SQLSetList sqlSets={sqlSets} onUpdate={fetchSqlSets} />\n        )}\n      </Paper>\n    </Box>\n  );\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}