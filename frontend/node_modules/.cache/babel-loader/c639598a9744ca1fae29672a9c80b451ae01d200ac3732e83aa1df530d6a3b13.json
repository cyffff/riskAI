{"ast":null,"code":"// Mock data for development and when API is unavailable\nexport const mockData = {\n  features: [{\n    id: 1,\n    name: \"Credit Score\",\n    description: \"Customer credit score from credit bureau\",\n    data_type: \"NUMBER\",\n    is_active: true,\n    category: \"Credit Risk\",\n    importance_score: 0.85,\n    computation_logic: \"Direct feed from credit bureau\",\n    tags: [{\n      id: 1,\n      name: \"Credit\"\n    }, {\n      id: 2,\n      name: \"Core\"\n    }],\n    created_at: \"2023-01-15T10:30:00Z\",\n    updated_at: \"2023-04-20T14:45:00Z\"\n  }, {\n    id: 2,\n    name: \"Income to Debt Ratio\",\n    description: \"Ratio of customer income to total debt\",\n    data_type: \"FLOAT\",\n    is_active: true,\n    category: \"Affordability\",\n    importance_score: 0.76,\n    computation_logic: \"income / total_debt\",\n    tags: [{\n      id: 3,\n      name: \"Income\"\n    }, {\n      id: 4,\n      name: \"Ratio\"\n    }],\n    created_at: \"2023-01-18T11:20:00Z\",\n    updated_at: \"2023-05-12T09:15:00Z\"\n  }, {\n    id: 3,\n    name: \"Previous Defaults\",\n    description: \"Number of previous defaults in the last 24 months\",\n    data_type: \"INTEGER\",\n    is_active: false,\n    category: \"Credit History\",\n    importance_score: 0.68,\n    computation_logic: \"COUNT(defaults WHERE date > NOW() - 24 MONTHS)\",\n    tags: [{\n      id: 5,\n      name: \"Historical\"\n    }, {\n      id: 6,\n      name: \"Delinquency\"\n    }],\n    created_at: \"2023-02-05T15:45:00Z\",\n    updated_at: \"2023-03-18T10:30:00Z\"\n  }],\n  sqlSets: [{\n    id: 1,\n    name: \"Core Risk Metrics\",\n    description: \"SQL queries for calculating core risk metrics\",\n    is_active: true,\n    created_at: \"2023-01-10T09:15:00Z\",\n    updated_at: \"2023-05-15T14:30:00Z\",\n    sql_statements: [{\n      id: 1,\n      name: \"Credit Utilization\",\n      sql_type: \"SELECT\",\n      is_active: true\n    }, {\n      id: 2,\n      name: \"Default Frequency\",\n      sql_type: \"SELECT\",\n      is_active: true\n    }]\n  }, {\n    id: 2,\n    name: \"Fraud Detection\",\n    description: \"SQL queries for fraud detection and analysis\",\n    is_active: true,\n    created_at: \"2023-02-20T11:45:00Z\",\n    updated_at: \"2023-04-10T16:20:00Z\",\n    sql_statements: [{\n      id: 3,\n      name: \"Suspicious Transactions\",\n      sql_type: \"SELECT\",\n      is_active: true\n    }]\n  }, {\n    id: 3,\n    name: \"Legacy Models\",\n    description: \"SQL queries used by legacy risk models\",\n    is_active: false,\n    created_at: \"2022-11-05T10:30:00Z\",\n    updated_at: \"2023-03-22T09:45:00Z\",\n    sql_statements: []\n  }],\n  sqlStatements: [{\n    id: 1,\n    name: \"Credit Utilization\",\n    statement: \"SELECT customer_id, SUM(balance) / SUM(credit_limit) AS utilization_ratio\\nFROM credit_accounts\\nWHERE status = 'active'\\nGROUP BY customer_id\\nHAVING utilization_ratio > :threshold\",\n    sql_type: \"SELECT\",\n    is_active: true,\n    sql_set_id: 1,\n    metadata: {\n      parameters: [{\n        name: \"threshold\",\n        type: \"float\",\n        default_value: \"0.7\",\n        required: true\n      }],\n      columns: [\"customer_id\", \"utilization_ratio\"],\n      description: \"Calculates credit utilization ratio for customers\"\n    },\n    created_at: \"2023-01-12T14:20:00Z\",\n    updated_at: \"2023-04-18T11:15:00Z\"\n  }, {\n    id: 2,\n    name: \"Default Frequency\",\n    statement: \"SELECT customer_id, COUNT(*) AS default_count\\nFROM loan_events\\nWHERE event_type = 'default'\\nAND event_date > DATEADD(month, -:months, CURRENT_DATE)\\nGROUP BY customer_id\",\n    sql_type: \"SELECT\",\n    is_active: true,\n    sql_set_id: 1,\n    metadata: {\n      parameters: [{\n        name: \"months\",\n        type: \"integer\",\n        default_value: \"24\",\n        required: true\n      }],\n      columns: [\"customer_id\", \"default_count\"],\n      description: \"Counts defaults within specified months\"\n    },\n    created_at: \"2023-01-15T09:30:00Z\",\n    updated_at: \"2023-05-10T15:45:00Z\"\n  }, {\n    id: 3,\n    name: \"Suspicious Transactions\",\n    statement: \"SELECT t.transaction_id, t.customer_id, t.amount, t.transaction_date\\nFROM transactions t\\nJOIN (\\n  SELECT customer_id, AVG(amount) * :multiplier AS threshold\\n  FROM transactions\\n  WHERE transaction_date > DATEADD(day, -90, CURRENT_DATE)\\n  GROUP BY customer_id\\n) avg_t ON t.customer_id = avg_t.customer_id\\nWHERE t.amount > avg_t.threshold\\nAND t.transaction_date > DATEADD(day, -:days, CURRENT_DATE)\",\n    sql_type: \"SELECT\",\n    is_active: true,\n    sql_set_id: 2,\n    metadata: {\n      parameters: [{\n        name: \"multiplier\",\n        type: \"float\",\n        default_value: \"3.0\",\n        required: true\n      }, {\n        name: \"days\",\n        type: \"integer\",\n        default_value: \"30\",\n        required: true\n      }],\n      columns: [\"transaction_id\", \"customer_id\", \"amount\", \"transaction_date\"],\n      description: \"Identifies transactions that exceed average amount by specified multiplier\"\n    },\n    created_at: \"2023-02-22T13:45:00Z\",\n    updated_at: \"2023-04-15T10:20:00Z\"\n  }]\n};","map":{"version":3,"names":["mockData","features","id","name","description","data_type","is_active","category","importance_score","computation_logic","tags","created_at","updated_at","sqlSets","sql_statements","sql_type","sqlStatements","statement","sql_set_id","metadata","parameters","type","default_value","required","columns"],"sources":["/Users/cyf/CursorProjects/riskAI/frontend/src/services/mockData.js"],"sourcesContent":["// Mock data for development and when API is unavailable\nexport const mockData = {\n  features: [\n    {\n      id: 1,\n      name: \"Credit Score\",\n      description: \"Customer credit score from credit bureau\",\n      data_type: \"NUMBER\",\n      is_active: true,\n      category: \"Credit Risk\",\n      importance_score: 0.85,\n      computation_logic: \"Direct feed from credit bureau\",\n      tags: [\n        { id: 1, name: \"Credit\" },\n        { id: 2, name: \"Core\" }\n      ],\n      created_at: \"2023-01-15T10:30:00Z\",\n      updated_at: \"2023-04-20T14:45:00Z\"\n    },\n    {\n      id: 2,\n      name: \"Income to Debt Ratio\",\n      description: \"Ratio of customer income to total debt\",\n      data_type: \"FLOAT\",\n      is_active: true,\n      category: \"Affordability\",\n      importance_score: 0.76,\n      computation_logic: \"income / total_debt\",\n      tags: [\n        { id: 3, name: \"Income\" },\n        { id: 4, name: \"Ratio\" }\n      ],\n      created_at: \"2023-01-18T11:20:00Z\",\n      updated_at: \"2023-05-12T09:15:00Z\"\n    },\n    {\n      id: 3,\n      name: \"Previous Defaults\",\n      description: \"Number of previous defaults in the last 24 months\",\n      data_type: \"INTEGER\",\n      is_active: false,\n      category: \"Credit History\",\n      importance_score: 0.68,\n      computation_logic: \"COUNT(defaults WHERE date > NOW() - 24 MONTHS)\",\n      tags: [\n        { id: 5, name: \"Historical\" },\n        { id: 6, name: \"Delinquency\" }\n      ],\n      created_at: \"2023-02-05T15:45:00Z\",\n      updated_at: \"2023-03-18T10:30:00Z\"\n    }\n  ],\n  \n  sqlSets: [\n    {\n      id: 1,\n      name: \"Core Risk Metrics\",\n      description: \"SQL queries for calculating core risk metrics\",\n      is_active: true,\n      created_at: \"2023-01-10T09:15:00Z\",\n      updated_at: \"2023-05-15T14:30:00Z\",\n      sql_statements: [\n        {\n          id: 1,\n          name: \"Credit Utilization\",\n          sql_type: \"SELECT\",\n          is_active: true\n        },\n        {\n          id: 2,\n          name: \"Default Frequency\",\n          sql_type: \"SELECT\",\n          is_active: true\n        }\n      ]\n    },\n    {\n      id: 2,\n      name: \"Fraud Detection\",\n      description: \"SQL queries for fraud detection and analysis\",\n      is_active: true,\n      created_at: \"2023-02-20T11:45:00Z\",\n      updated_at: \"2023-04-10T16:20:00Z\",\n      sql_statements: [\n        {\n          id: 3,\n          name: \"Suspicious Transactions\",\n          sql_type: \"SELECT\",\n          is_active: true\n        }\n      ]\n    },\n    {\n      id: 3,\n      name: \"Legacy Models\",\n      description: \"SQL queries used by legacy risk models\",\n      is_active: false,\n      created_at: \"2022-11-05T10:30:00Z\",\n      updated_at: \"2023-03-22T09:45:00Z\",\n      sql_statements: []\n    }\n  ],\n  \n  sqlStatements: [\n    {\n      id: 1,\n      name: \"Credit Utilization\",\n      statement: \"SELECT customer_id, SUM(balance) / SUM(credit_limit) AS utilization_ratio\\nFROM credit_accounts\\nWHERE status = 'active'\\nGROUP BY customer_id\\nHAVING utilization_ratio > :threshold\",\n      sql_type: \"SELECT\",\n      is_active: true,\n      sql_set_id: 1,\n      metadata: {\n        parameters: [\n          { name: \"threshold\", type: \"float\", default_value: \"0.7\", required: true }\n        ],\n        columns: [\"customer_id\", \"utilization_ratio\"],\n        description: \"Calculates credit utilization ratio for customers\"\n      },\n      created_at: \"2023-01-12T14:20:00Z\",\n      updated_at: \"2023-04-18T11:15:00Z\"\n    },\n    {\n      id: 2,\n      name: \"Default Frequency\",\n      statement: \"SELECT customer_id, COUNT(*) AS default_count\\nFROM loan_events\\nWHERE event_type = 'default'\\nAND event_date > DATEADD(month, -:months, CURRENT_DATE)\\nGROUP BY customer_id\",\n      sql_type: \"SELECT\",\n      is_active: true,\n      sql_set_id: 1,\n      metadata: {\n        parameters: [\n          { name: \"months\", type: \"integer\", default_value: \"24\", required: true }\n        ],\n        columns: [\"customer_id\", \"default_count\"],\n        description: \"Counts defaults within specified months\"\n      },\n      created_at: \"2023-01-15T09:30:00Z\",\n      updated_at: \"2023-05-10T15:45:00Z\"\n    },\n    {\n      id: 3,\n      name: \"Suspicious Transactions\",\n      statement: \"SELECT t.transaction_id, t.customer_id, t.amount, t.transaction_date\\nFROM transactions t\\nJOIN (\\n  SELECT customer_id, AVG(amount) * :multiplier AS threshold\\n  FROM transactions\\n  WHERE transaction_date > DATEADD(day, -90, CURRENT_DATE)\\n  GROUP BY customer_id\\n) avg_t ON t.customer_id = avg_t.customer_id\\nWHERE t.amount > avg_t.threshold\\nAND t.transaction_date > DATEADD(day, -:days, CURRENT_DATE)\",\n      sql_type: \"SELECT\",\n      is_active: true,\n      sql_set_id: 2,\n      metadata: {\n        parameters: [\n          { name: \"multiplier\", type: \"float\", default_value: \"3.0\", required: true },\n          { name: \"days\", type: \"integer\", default_value: \"30\", required: true }\n        ],\n        columns: [\"transaction_id\", \"customer_id\", \"amount\", \"transaction_date\"],\n        description: \"Identifies transactions that exceed average amount by specified multiplier\"\n      },\n      created_at: \"2023-02-22T13:45:00Z\",\n      updated_at: \"2023-04-15T10:20:00Z\"\n    }\n  ]\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}